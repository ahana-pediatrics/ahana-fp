<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="Mocha Tests" time="0.0070" tests="52" failures="0">
  <testsuite name="Root Suite" timestamp="2020-10-26T21:58:52" tests="0" time="0.0000" failures="0">
  </testsuite>
  <testsuite name="AsyncData" timestamp="2020-10-26T21:58:52" tests="4" file="/Users/danrumney/WebstormProjects/ahana-fp/test/AsyncData.spec.ts" time="0.0020" failures="0">
    <testcase name="AsyncData represents a remotely loaded piece of data" time="0.0010" classname="represents a remotely loaded piece of data">
    </testcase>
    <testcase name="AsyncData can map data" time="0.0000" classname="can map data">
    </testcase>
    <testcase name="AsyncData can filter data" time="0.0010" classname="can filter data">
    </testcase>
    <testcase name="AsyncData can reduce data" time="0.0000" classname="can reduce data">
    </testcase>
  </testsuite>
  <testsuite name=".getOptional" timestamp="2020-10-26T21:58:52" tests="5" file="/Users/danrumney/WebstormProjects/ahana-fp/test/AsyncData.spec.ts" time="0.0000" failures="0">
    <testcase name="AsyncData .getOptional can be converted to an empty Optional when no request has been made" time="0.0000" classname="can be converted to an empty Optional when no request has been made">
    </testcase>
    <testcase name="AsyncData .getOptional can be converted to an empty Optional when a request has been made" time="0.0000" classname="can be converted to an empty Optional when a request has been made">
    </testcase>
    <testcase name="AsyncData .getOptional can be converted to an Optional if there is data" time="0.0000" classname="can be converted to an Optional if there is data">
    </testcase>
    <testcase name="AsyncData .getOptional can be converted to an Optional array if there is data" time="0.0000" classname="can be converted to an Optional array if there is data">
    </testcase>
    <testcase name="AsyncData .getOptional can be converted to an empty Optional if there is an error" time="0.0000" classname="can be converted to an empty Optional if there is an error">
    </testcase>
  </testsuite>
  <testsuite name=".value" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/AsyncData.spec.ts" time="0.0010" failures="0">
    <testcase name="AsyncData .value returns the internal value if successfully loaded" time="0.0000" classname="returns the internal value if successfully loaded">
    </testcase>
    <testcase name="AsyncData .value throws an error if data is not loaded" time="0.0010" classname="throws an error if data is not loaded">
    </testcase>
    <testcase name="AsyncData .value throws an error if data load failed" time="0.0000" classname="throws an error if data load failed">
    </testcase>
  </testsuite>
  <testsuite name=".singleValue" timestamp="2020-10-26T21:58:52" tests="4" file="/Users/danrumney/WebstormProjects/ahana-fp/test/AsyncData.spec.ts" time="0.0010" failures="0">
    <testcase name="AsyncData .singleValue returns the internal value if successfully loaded" time="0.0000" classname="returns the internal value if successfully loaded">
    </testcase>
    <testcase name="AsyncData .singleValue throws an error if not single-valued" time="0.0000" classname="throws an error if not single-valued">
    </testcase>
    <testcase name="AsyncData .singleValue throws an error if data is not loaded" time="0.0000" classname="throws an error if data is not loaded">
    </testcase>
    <testcase name="AsyncData .singleValue throws an error if data load failed" time="0.0010" classname="throws an error if data load failed">
    </testcase>
  </testsuite>
  <testsuite name="Either" timestamp="2020-10-26T21:58:52" tests="2" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Either.spec.ts" time="0.0000" failures="0">
    <testcase name="Either maps Optionals correctly (right)" time="0.0000" classname="maps Optionals correctly (right)">
    </testcase>
    <testcase name="Either maps Optionals correctly (left)" time="0.0000" classname="maps Optionals correctly (left)">
    </testcase>
  </testsuite>
  <testsuite name="Lazy" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Lazy.spec.ts" time="0.0020" failures="0">
    <testcase name="Lazy represents a lazy loaded piece of data" time="0.0000" classname="represents a lazy loaded piece of data">
    </testcase>
    <testcase name="Lazy calls the intializer once" time="0.0020" classname="calls the intializer once">
    </testcase>
    <testcase name="Lazy allows chaining" time="0.0000" classname="allows chaining">
    </testcase>
  </testsuite>
  <testsuite name="Optional" timestamp="2020-10-26T21:58:52" tests="1" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional represents a value which is possibly set" time="0.0000" classname="represents a value which is possibly set">
    </testcase>
  </testsuite>
  <testsuite name="#isPresent" timestamp="2020-10-26T21:58:52" tests="2" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #isPresent reports when a value is present in the Optional" time="0.0000" classname="reports when a value is present in the Optional">
    </testcase>
    <testcase name="Optional #isPresent reports when a value is not present in the Optional" time="0.0000" classname="reports when a value is not present in the Optional">
    </testcase>
  </testsuite>
  <testsuite name="#orElse" timestamp="2020-10-26T21:58:52" tests="2" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #orElse returns the internal value if set" time="0.0000" classname="returns the internal value if set">
    </testcase>
    <testcase name="Optional #orElse returns the orElse value if not set" time="0.0000" classname="returns the orElse value if not set">
    </testcase>
  </testsuite>
  <testsuite name="#orNothing" timestamp="2020-10-26T21:58:52" tests="2" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #orNothing returns the internal value if set" time="0.0000" classname="returns the internal value if set">
    </testcase>
    <testcase name="Optional #orNothing returns undefined value if not set" time="0.0000" classname="returns undefined value if not set">
    </testcase>
  </testsuite>
  <testsuite name="#orNull" timestamp="2020-10-26T21:58:52" tests="2" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #orNull returns the internal value if set" time="0.0000" classname="returns the internal value if set">
    </testcase>
    <testcase name="Optional #orNull returns null value if not set" time="0.0000" classname="returns null value if not set">
    </testcase>
  </testsuite>
  <testsuite name="#equals" timestamp="2020-10-26T21:58:52" tests="4" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #equals compares two Optionals with identical values as equal" time="0.0000" classname="compares two Optionals with identical values as equal">
    </testcase>
    <testcase name="Optional #equals compares two Optionals with different values as not equal" time="0.0000" classname="compares two Optionals with different values as not equal">
    </testcase>
    <testcase name="Optional #equals compares two empty Optionals as not equal" time="0.0000" classname="compares two empty Optionals as not equal">
    </testcase>
    <testcase name="Optional #equals compares two Optionals with identical complex values as equal" time="0.0000" classname="compares two Optionals with identical complex values as equal">
    </testcase>
  </testsuite>
  <testsuite name="#map" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #map maps one Optional to another" time="0.0000" classname="maps one Optional to another">
    </testcase>
    <testcase name="Optional #map maps while squashing internal Optionals" time="0.0000" classname="maps while squashing internal Optionals">
    </testcase>
    <testcase name="Optional #map maps empty to empty" time="0.0000" classname="maps empty to empty">
    </testcase>
  </testsuite>
  <testsuite name="#filter" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #filter filters an Optional to the same value if the filter matches" time="0.0000" classname="filters an Optional to the same value if the filter matches">
    </testcase>
    <testcase name="Optional #filter filters an Optional to empty if the filter does not match" time="0.0000" classname="filters an Optional to empty if the filter does not match">
    </testcase>
    <testcase name="Optional #filter filters empty to empty" time="0.0000" classname="filters empty to empty">
    </testcase>
  </testsuite>
  <testsuite name="#toJSON" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0010" failures="0">
    <testcase name="Optional #toJSON returns undefined when JSON stringified" time="0.0000" classname="returns undefined when JSON stringified">
    </testcase>
    <testcase name="Optional #toJSON returns correct JSON  stringified" time="0.0010" classname="returns correct JSON  stringified">
    </testcase>
    <testcase name="Optional #toJSON handles nested optionals when stringified" time="0.0000" classname="handles nested optionals when stringified">
    </testcase>
  </testsuite>
  <testsuite name="#property" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/Optional.spec.ts" time="0.0000" failures="0">
    <testcase name="Optional #property returns the enclosed property" time="0.0000" classname="returns the enclosed property">
    </testcase>
    <testcase name="Optional #property returns undefined" time="0.0000" classname="returns undefined">
    </testcase>
    <testcase name="Optional #property returns the default value" time="0.0000" classname="returns the default value">
    </testcase>
  </testsuite>
  <testsuite name="partial" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/partial.spec.ts" time="0.0000" failures="0">
    <testcase name="partial peforms partial application" time="0.0000" classname="peforms partial application">
    </testcase>
    <testcase name="partial supports partial application with multiple applied args" time="0.0000" classname="supports partial application with multiple applied args">
    </testcase>
    <testcase name="partial supports complete application with multiple applied args" time="0.0000" classname="supports complete application with multiple applied args">
    </testcase>
  </testsuite>
  <testsuite name="partialRight" timestamp="2020-10-26T21:58:52" tests="3" file="/Users/danrumney/WebstormProjects/ahana-fp/test/partial.spec.ts" time="0.0000" failures="0">
    <testcase name="partialRight peforms partial application" time="0.0000" classname="peforms partial application">
    </testcase>
    <testcase name="partialRight supports partial application with multiple applied args" time="0.0000" classname="supports partial application with multiple applied args">
    </testcase>
    <testcase name="partialRight supports complete application with multiple applied args" time="0.0000" classname="supports complete application with multiple applied args">
    </testcase>
  </testsuite>
</testsuites>